type Booleanish = boolean | 'true' | 'false';

// use jsc --options to get the list of options
export interface VMOptions {
  useKernTCSM: Booleanish;
  validateOptions: Booleanish;
  dumpOptions: 0 | 1 | 2 | 3;
  configFile: string;
  useLLInt: Booleanish;
  useJIT: Booleanish;
  useBaselineJIT: Booleanish;
  useDFGJIT: Booleanish;
  useRegExpJIT: Booleanish;
  useDOMJIT: Booleanish;
  reportMustSucceedExecutableAllocations: Booleanish;
  maxPerThreadStackUsage: number;
  softReservedZoneSize: number;
  reservedZoneSize: number;
  crashIfCantAllocateJITMemory: Booleanish;
  jitMemoryReservationSize: number;
  useSeparatedWXHeap: Booleanish;
  forceCodeBlockLiveness: Booleanish;
  forceICFailure: Booleanish;
  repatchCountForCoolDown: number;
  initialCoolDownCount: number;
  repatchBufferingCountdown: number;
  dumpGeneratedBytecodes: Booleanish;
  dumpBytecodeLivenessResults: Booleanish;
  validateBytecode: Booleanish;
  forceDebuggerBytecodeGeneration: Booleanish;
  dumpBytecodesBeforeGeneratorification: Booleanish;
  useFunctionDotArguments: Booleanish;
  useTailCalls: Booleanish;
  optimizeRecursiveTailCalls: Booleanish;
  alwaysUseShadowChicken: Booleanish;
  shadowChickenLogSize: number;
  shadowChickenMaxTailDeletedFramesSize: number;
  dumpDisassembly: Booleanish;
  asyncDisassembly: Booleanish;
  dumpDFGDisassembly: Booleanish;
  dumpFTLDisassembly: Booleanish;
  dumpRegExpDisassembly: Booleanish;
  dumpAllDFGNodes: Booleanish;
  bytecodeRangeToJITCompile: string;
  bytecodeRangeToDFGCompile: string;
  bytecodeRangeToFTLCompile: string;
  jitWhitelist: string;
  dfgWhitelist: string;
  ftlWhitelist: string;
  dumpSourceAtDFGTime: Booleanish;
  dumpBytecodeAtDFGTime: Booleanish;
  dumpGraphAfterParsing: Booleanish;
  dumpGraphAtEachPhase: Booleanish;
  dumpDFGGraphAtEachPhase: Booleanish;
  dumpDFGFTLGraphAtEachPhase: Booleanish;
  dumpB3GraphAtEachPhase: Booleanish;
  dumpAirGraphAtEachPhase: Booleanish;
  verboseDFGBytecodeParsing: Booleanish;
  safepointBeforeEachPhase: Booleanish;
  verboseCompilation: Booleanish;
  verboseFTLCompilation: Booleanish;
  logCompilationChanges: Booleanish;
  useProbeOSRExit: Booleanish;
  printEachOSRExit: Booleanish;
  validateGraph: Booleanish;
  validateGraphAtEachPhase: Booleanish;
  verboseValidationFailure: Booleanish;
  verboseOSR: Booleanish;
  verboseDFGOSRExit: Booleanish;
  verboseFTLOSRExit: Booleanish;
  verboseCallLink: Booleanish;
  verboseCompilationQueue: Booleanish;
  reportCompileTimes: Booleanish;
  reportBaselineCompileTimes: Booleanish;
  reportDFGCompileTimes: Booleanish;
  reportFTLCompileTimes: Booleanish;
  reportTotalCompileTimes: Booleanish;
  reportParseTimes: Booleanish;
  reportBytecodeCompileTimes: Booleanish;
  countParseTimes: Booleanish;
  verboseExitProfile: Booleanish;
  verboseCFA: Booleanish;
  verboseDFGFailure: Booleanish;
  verboseFTLToJSThunk: Booleanish;
  verboseFTLFailure: Booleanish;
  alwaysComputeHash: Booleanish;
  testTheFTL: Booleanish;
  verboseSanitizeStack: Booleanish;
  useGenerationalGC: Booleanish;
  useConcurrentGC: Booleanish;
  collectContinuously: Booleanish;
  collectContinuouslyPeriodMS: number;
  forceFencedBarrier: Booleanish;
  verboseVisitRace: Booleanish;
  optimizeParallelSlotVisitorsForStoppedMutator: Booleanish;
  largeHeapSize: number;
  smallHeapSize: number;
  smallHeapRAMFraction: number;
  smallHeapGrowthFactor: number;
  mediumHeapRAMFraction: number;
  mediumHeapGrowthFactor: number;
  largeHeapGrowthFactor: number;
  miniVMHeapGrowthFactor: number;
  criticalGCMemoryThreshold: number;
  minimumMutatorUtilization: number;
  maximumMutatorUtilization: number;
  epsilonMutatorUtilization: number;
  concurrentGCMaxHeadroom: number;
  concurrentGCPeriodMS: number;
  useStochasticMutatorScheduler: Booleanish;
  minimumGCPauseMS: number;
  gcPauseScale: number;
  gcIncrementBytes: number;
  gcIncrementMaxBytes: number;
  gcIncrementScale: number;
  scribbleFreeCells: Booleanish;
  sizeClassProgression: number;
  largeAllocationCutoff: number;
  dumpSizeClasses: Booleanish;
  useBumpAllocator: Booleanish;
  stealEmptyBlocksFromOtherAllocators: Booleanish;
  eagerlyUpdateTopCallFrame: Booleanish;
  dumpZappedCellCrashData: Booleanish;
  useOSREntryToDFG: Booleanish;
  useOSREntryToFTL: Booleanish;
  useFTLJIT: Booleanish;
  useFTLTBAA: Booleanish;
  validateFTLOSRExitLiveness: Booleanish;
  defaultB3OptLevel: number;
  b3AlwaysFailsBeforeCompile: Booleanish;
  b3AlwaysFailsBeforeLink: Booleanish;
  ftlCrashes: Booleanish;
  clobberAllRegsInFTLICSlowPath: Booleanish;
  enableJITDebugAssertions: Booleanish;
  useAccessInlining: Booleanish;
  maxAccessVariantListSize: number;
  usePolyvariantDevirtualization: Booleanish;
  usePolymorphicAccessInlining: Booleanish;
  maxPolymorphicAccessInliningListSize: number;
  usePolymorphicCallInlining: Booleanish;
  usePolymorphicCallInliningForNonStubStatus: Booleanish;
  maxPolymorphicCallVariantListSize: number;
  maxPolymorphicCallVariantListSizeForTopTier: number;
  maxPolymorphicCallVariantListSizeForWebAssemblyToJS: number;
  maxPolymorphicCallVariantsForInlining: number;
  frequentCallThreshold: number;
  minimumCallToKnownRate: number;
  createPreHeaders: Booleanish;
  useMovHintRemoval: Booleanish;
  usePutStackSinking: Booleanish;
  useObjectAllocationSinking: Booleanish;
  useValueRepElimination: Booleanish;
  useArityFixupInlining: Booleanish;
  logExecutableAllocation: Booleanish;
  maxDFGNodesInBasicBlockForPreciseAnalysis: number;
  useConcurrentJIT: Booleanish;
  numberOfDFGCompilerThreads: number;
  numberOfFTLCompilerThreads: number;
  priorityDeltaOfDFGCompilerThreads: number;
  priorityDeltaOfFTLCompilerThreads: number;
  priorityDeltaOfWasmCompilerThreads: number;
  useProfiler: Booleanish;
  disassembleBaselineForProfiler: Booleanish;
  useArchitectureSpecificOptimizations: Booleanish;
  breakOnThrow: Booleanish;
  maximumOptimizationCandidateBytecodeCost: number;
  maximumFunctionForCallInlineCandidateBytecodeCost: number;
  maximumFunctionForClosureCallInlineCandidateBytecodeCost: number;
  maximumFunctionForConstructInlineCandidateBytecoodeCost: number;
  maximumFTLCandidateBytecodeCost: number;
  maximumInliningDepth: number;
  maximumInliningRecursion: number;
  maximumInliningCallerBytecodeCost: number;
  maximumVarargsForInlining: number;
  maximumBinaryStringSwitchCaseLength: number;
  maximumBinaryStringSwitchTotalLength: number;
  jitPolicyScale: number;
  forceEagerCompilation: Booleanish;
  thresholdForJITAfterWarmUp: number;
  thresholdForJITSoon: number;
  thresholdForOptimizeAfterWarmUp: number;
  thresholdForOptimizeAfterLongWarmUp: number;
  thresholdForOptimizeSoon: number;
  executionCounterIncrementForLoop: number;
  executionCounterIncrementForEntry: number;
  thresholdForFTLOptimizeAfterWarmUp: number;
  thresholdForFTLOptimizeSoon: number;
  ftlTierUpCounterIncrementForLoop: number;
  ftlTierUpCounterIncrementForReturn: number;
  ftlOSREntryFailureCountForReoptimization: number;
  ftlOSREntryRetryThreshold: number;
  evalThresholdMultiplier: number;
  maximumEvalCacheableSourceLength: number;
  randomizeExecutionCountsBetweenCheckpoints: Booleanish;
  maximumExecutionCountsBetweenCheckpointsForBaseline: number;
  maximumExecutionCountsBetweenCheckpointsForUpperTiers: number;
  likelyToTakeSlowCaseMinimumCount: number;
  couldTakeSlowCaseMinimumCount: number;
  osrExitCountForReoptimization: number;
  osrExitCountForReoptimizationFromLoop: number;
  reoptimizationRetryCounterMax: number;
  minimumOptimizationDelay: number;
  maximumOptimizationDelay: number;
  desiredProfileLivenessRate: number;
  desiredProfileFullnessRate: number;
  doubleVoteRatioForDoubleFormat: number;
  structureCheckVoteRatioForHoisting: number;
  checkArrayVoteRatioForHoisting: number;
  maximumDirectCallStackSize: number;
  minimumNumberOfScansBetweenRebalance: number;
  numberOfGCMarkers: number;
  useParallelMarkingConstraintSolver: Booleanish;
  opaqueRootMergeThreshold: number;
  minHeapUtilization: number;
  minMarkedBlockUtilization: number;
  slowPathAllocsBetweenGCs: number;
  percentCPUPerMBForFullTimer: number;
  percentCPUPerMBForEdenTimer: number;
  collectionTimerMaxPercentCPU: number;
  forceWeakRandomSeed: Booleanish;
  forcedWeakRandomSeed: number;
  useZombieMode: Booleanish;
  useImmortalObjects: Booleanish;
  sweepSynchronously: Booleanish;
  logGC: 'None' | 'Basic' | 'Verbose';
  useGC: Booleanish;
  gcAtEnd: Booleanish;
  forceGCSlowPaths: Booleanish;
  gcMaxHeapSize: number;
  forceRAMSize: number;
  recordGCPauseTimes: Booleanish;
  dumpHeapStatisticsAtVMDestruction: Booleanish;
  forceCodeBlockToJettisonDueToOldAge: Booleanish;
  useEagerCodeBlockJettisonTiming: Booleanish;
  useTypeProfiler: Booleanish;
  useControlFlowProfiler: Booleanish;
  useSamplingProfiler: Booleanish;
  sampleInterval: number;
  collectSamplingProfilerDataForJSCShell: Booleanish;
  samplingProfilerTopFunctionsCount: number;
  samplingProfilerTopBytecodesCount: number;
  samplingProfilerPath: string;
  sampleCCode: Booleanish;
  alwaysGeneratePCToCodeOriginMap: Booleanish;
  verifyHeap: Booleanish;
  numberOfGCCyclesToRecordForVerification: number;
  exceptionStackTraceLimit: number;
  defaultErrorStackTraceLimit: number;
  useExceptionFuzz: Booleanish;
  fireExceptionFuzzAt: number;
  validateDFGExceptionHandling: Booleanish;
  dumpSimulatedThrows: Booleanish;
  validateExceptionChecks: Booleanish;
  unexpectedExceptionStackTraceLimit: number;
  useExecutableAllocationFuzz: Booleanish;
  fireExecutableAllocationFuzzAt: number;
  fireExecutableAllocationFuzzAtOrAfter: number;
  verboseExecutableAllocationFuzz: Booleanish;
  useOSRExitFuzz: Booleanish;
  fireOSRExitFuzzAtStatic: number;
  fireOSRExitFuzzAt: number;
  fireOSRExitFuzzAtOrAfter: number;
  useRandomizingFuzzerAgent: Booleanish;
  seedOfRandomizingFuzzerAgent: number;
  dumpRandomizingFuzzerAgentPredictions: Booleanish;
  useDoublePredictionFuzzerAgent: Booleanish;
  logPhaseTimes: Booleanish;
  rareBlockPenalty: number;
  airLinearScanVerbose: Booleanish;
  airLinearScanSpillsEverything: Booleanish;
  airForceBriggsAllocator: Booleanish;
  airForceIRCAllocator: Booleanish;
  airRandomizeRegs: Booleanish;
  airRandomizeRegsSeed: number;
  coalesceSpillSlots: Booleanish;
  logAirRegisterPressure: Booleanish;
  useB3TailDup: Booleanish;
  maxB3TailDupBlockSize: number;
  maxB3TailDupBlockSuccessors: number;
  useDollarVM: Booleanish;
  functionOverrides: string;
  useSigillCrashAnalyzer: Booleanish;
  watchdog: number;
  usePollingTraps: Booleanish;
  useMachForExceptions: Booleanish;
  useICStats: Booleanish;
  prototypeHitCountForLLIntCaching: number;
  dumpCompiledRegExpPatterns: Booleanish;
  dumpModuleRecord: Booleanish;
  dumpModuleLoadingState: Booleanish;
  exposeInternalModuleLoader: Booleanish;
  useSuperSampler: Booleanish;
  useSourceProviderCache: Booleanish;
  useCodeCache: Booleanish;
  useWebAssembly: Booleanish;
  enableSpectreMitigations: Booleanish;
  enableSpectreGadgets: Booleanish;
  zeroStackFrame: Booleanish;
  failToCompileWebAssemblyCode: Booleanish;
  webAssemblyPartialCompileLimit: number;
  webAssemblyBBQAirOptimizationLevel: number;
  webAssemblyBBQB3OptimizationLevel: number;
  webAssemblyOMGOptimizationLevel: number;
  useBBQTierUpChecks: Booleanish;
  useWebAssemblyOSR: Booleanish;
  thresholdForOMGOptimizeAfterWarmUp: number;
  thresholdForOMGOptimizeSoon: number;
  omgTierUpCounterIncrementForLoop: number;
  omgTierUpCounterIncrementForEntry: number;
  useWebAssemblyFastMemory: Booleanish;
  logWebAssemblyMemory: Booleanish;
  webAssemblyFastMemoryRedzonePages: number;
  crashIfWebAssemblyCantFastMemory: Booleanish;
  maxNumWebAssemblyFastMemories: number;
  useFastTLSForWasmContext: Booleanish;
  wasmBBQUsesAir: Booleanish;
  webAssemblyBBQAirModeThreshold: number;
  useWebAssemblyStreamingApi: Booleanish;
  useCallICsForWebAssemblyToJSCalls: Booleanish;
  useEagerWebAssemblyModuleHashing: Booleanish;
  useWebAssemblyReferences: Booleanish;
  useWeakRefs: Booleanish;
  useBigInt: Booleanish;
  useNullishAwareOperators: Booleanish;
  useArrayAllocationProfiling: Booleanish;
  forcePolyProto: Booleanish;
  forceMiniVMMode: Booleanish;
  useTracePoints: Booleanish;
  traceBaselineJITExecution: Booleanish;
  thresholdForGlobalLexicalBindingEpoch: number;
  diskCachePath: string;
  forceDiskCache: Booleanish;
  validateAbstractInterpreterState: Booleanish;
  validateAbstractInterpreterStateProbability: number;
  dumpJITMemoryPath: string;
  dumpJITMemoryFlushInterval: number;
  useUnlinkedCodeBlockJettisoning: Booleanish;
}
